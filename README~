


						  README
						-TEMA4 POO-

    Pentru rezolvarea temei am implementat interfetele din folderul "homework" din
arhiva de resurse, iar fiecare clasa se afla in folderul in care este interfata
corespunzatoare.
    Clasele "Server", "BracketsFactory", "OperatorsFactory" si "OperandsFactory"
care implementeaza interfetele "IServer", "IBracketsFactory", "IOperatorsFactory" 
respectiv "IOperandsFactory" sunt de tip Singleton si se pot instantia cu ajutorul
metodei getInstance(). De asemenea, clasele "BracketsFactory", "OperatorsFactory"
si "OperandsFactory" respecta patternul Factory. Metoda "createBracket" creeaza
obiecte de tip Bracket, metoda "createOperand" creeaza obiecte de tip NumberOperand,
iar metoda "createOperator" creeaza, in functie de string-ul primit, un anume tip
de operator(+,-,/,*^,log,sqrt).
    Pentru operatori am creat cate o clasa care implementaza fie "IUnaryOperator",
daca este operator unar, fie "IBinaryOperator", daca este operator binar. In
fiecare din aceste clase se afla o constanta("prority") ce reprezinta prioritatea
operatorului respectiv. Metoda calculate returneaza un obiect de tip "NumberOperand"
ce contine rezultatul calculului efectuat cu ajutorul operatorului.
    Implementarea propriu-zisa a algoritmului care efectueaza calculele se face in
metoda "publish" din clasa "Server". Am implementat algoritmul descris in laboratorul
de Structuri de Date din referinte. Stivele de operatori si operanzi, cu ajutorul
carora se face conversia unei expresii si se calculeaza, sunt private si contin
elemente de tip IToken.
